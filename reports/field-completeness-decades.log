Traceback (most recent call last):
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/richard/.virtualenvs/etcdocs/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Save all the possible collectioncode
import altair as alt

ranges = [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]
count =0

dept_col_counts = None
charts = []
hcharts = []

def create_chart(data_df, title):
  data_rows_df = pd.DataFrame()
  for column in data_df.columns[1:]:
    # Group into counts of percentages 0-10, 10-20, ... 90-100
    # dept_col_counts = dept_stats_df[column].value_counts(bins=10, sort=False)
    
    dept_col_counts = data_df[column].groupby(pd.cut(data_df[column], ranges, labels=["0%","10%","20%","30%","40%","50%","60%","70%","80%","90%"], include_lowest=True)).count()
    dept_col_counts.name = column
    data_rows_df = data_rows_df.append(dept_col_counts, ignore_index=False)
  data_rows_df = data_rows_df.rename_axis('Concept').rename_axis('Percentages', axis='columns')
    # TO handle converting from CategoricalIndex - may change https://github.com/pandas-dev/pandas/issues/19136
  data_rows_df.columns = data_rows_df.columns.tolist()
  data_rows_df = data_rows_df.reset_index()
  data_rows_melt_df = data_rows_df.melt(id_vars=['Concept'], var_name='Percentage', value_name='Objects')
  chart = alt.Chart(data_rows_melt_df).mark_bar().encode(
       x='Objects:Q',
       y='Concept:O',
       color='Percentage:O'
      tooltip=['Percentage', 'Objects']
    ).properties(width=220, title=title)
  
  return chart
        
for decade in range(1850,2030,10):
  dept_rows_df = pd.DataFrame()
  dept_stats_df = tidied_df[tidied_df[' accessionYear'].between(decade,decade+9)] 
  # Now need to loop over each completeness coll in turn
  for column in dept_stats_df.columns[1:]:
    # Group into counts of percentages 0-10, 10-20, ... 90-100
    # dept_col_counts = dept_stats_df[column].value_counts(bins=10, sort=False)
    
    dept_col_counts = dept_stats_df[column].groupby(pd.cut(dept_stats_df[column], ranges, labels=["0%","10%","20%","30%","40%","50%","60%","70%","80%","90%"], include_lowest=True)).count()
    dept_col_counts.name = column
    dept_rows_df = dept_rows_df.append(dept_col_counts, ignore_index=False)
    
  dept_rows_df = dept_rows_df.rename_axis('Concept').rename_axis('Percentages', axis='columns')
    # TO handle converting from CategoricalIndex - may change https://github.com/pandas-dev/pandas/issues/19136
  dept_rows_df.columns = dept_rows_df.columns.tolist()
  #print(dept_rows_df)
  dept_rows_df = dept_rows_df.reset_index()

  dept_rows_melt_df = dept_rows_df.melt(id_vars=['Concept'], var_name='Percentage', value_name='Objects')

  chart = alt.Chart(dept_rows_melt_df).mark_bar().encode(
       x='Objects:Q',
       y='Concept:O',
        color='Percentage:O',
      tooltip=['Percentage', 'Objects']
    ).properties(width=220, title="%s (%d)" % (decade, len(dept_stats_df)))
  charts.append(chart)
  if count > 1:
      hcharts.append(alt.hconcat(*charts))
      charts = []
      count = 0
  else:
      count += 1

# Handle post current year, no year and less than opening year (1857)

dept_stats_df = tidied_df[tidied_df[' accessionYear'] < 1857.0] 
#print(dept_stats_df)
charts.append(create_chart(dept_stats_df, "Pre-1857 (%d)" % len(dept_stats_df)))
      
dept_stats_df = tidied_df[tidied_df[' accessionYear'].isnull()] 
#print(dept_stats_df)
charts.append(create_chart(dept_stats_df, "No Year (%d)" % len(dept_stats_df)))
    
hcharts.append(alt.hconcat(*charts))

alt.vconcat(*hcharts)

------------------

[0;36m  File [0;32m"<ipython-input-4-4c7c0c118228>"[0;36m, line [0;32m29[0m
[0;31m    tooltip=['Percentage', 'Objects'][0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-4-4c7c0c118228>, line 29)

